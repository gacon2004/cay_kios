'use client';

import React, { useState, useEffect } from 'react';
import { CreditCard, User, Phone, Calendar, Scan } from 'lucide-react';
import { Patient, useAppContext } from '../context/AppContext';
import NumericKeyboard from './NumericKeyboard';
import CCCDScanner from './CCCDScanner';
import { useToast } from './ui/use-toast';
import api from '@/app/axios/api';

// Interface cho d·ªØ li·ªáu t·ª´ API provinces.open-api.vn
interface Province {
    code: string;
    name: string;
}

interface Ward {
    code: string;
    name: string;
}

interface District {
    code: string;
    name: string;
    wards: Ward[];
}

// Interface cho d√¢n t·ªôc v√† ngh·ªÅ nghi·ªáp
interface Ethnicity {
    code: string;
    name: string;
}

interface Occupation {
    code: string;
    name: string;
}

// Interface cho patientForm
interface PatientForm {
    national_id: string;
    full_name: string;
    date_of_birth: string;
    gender: string;
    phone: string;
    ward: string;
    district: string;
    province: string;
    ethnicity: string;
    occupation: string;
}

const PatientInfo: React.FC = () => {
    const { setCurrentStep, patient, setPatient } = useAppContext();
    const [cccd, setCccd] = useState<string>('');
    const [showKeyboard, setShowKeyboard] = useState<boolean>(false);
    const [patientForm, setPatientForm] = useState<PatientForm>({
        national_id: '',
        full_name: '',
        date_of_birth: '',
        gender: '',
        phone: '',
        ward: '',
        district: '',
        province: '',
        ethnicity: '',
        occupation: '',
    });

    const [showForm, setShowForm] = useState<boolean>(false);
    const [patientExists, setPatientExists] = useState<boolean>(false);
    const [showPhoneKeyboard, setShowPhoneKeyboard] = useState<boolean>(false);
    const [showScanner, setShowScanner] = useState<boolean>(false);
    const [provinces, setProvinces] = useState<Province[]>([]);
    const [districts, setDistricts] = useState<District[]>([]);
    const [wards, setWards] = useState<Ward[]>([]);
    const [ethnicities, setEthnicities] = useState<Ethnicity[]>([]);
    const [isCustomOccupation, setIsCustomOccupation] =
        useState<boolean>(false);
    const [selectedProvinceCode, setSelectedProvinceCode] =
        useState<string>('');
    const [selectedDistrictCode, setSelectedDistrictCode] =
        useState<string>('');

    const { toast } = useToast();

    // Danh s√°ch ngh·ªÅ nghi·ªáp tƒ©nh
    const occupations: Occupation[] = [
        { code: '1', name: 'Nh√¢n vi√™n vƒÉn ph√≤ng' },
        { code: '2', name: 'C√¥ng nh√¢n' },
        { code: '3', name: 'H·ªçc sinh/Sinh vi√™n' },
        { code: '4', name: 'Ngh·ªâ h∆∞u' },
        { code: 'custom', name: 'T·ª± do' },
    ];

    // Danh s√°ch d√¢n t·ªôc tƒ©nh
    const staticEthnicities: Ethnicity[] = [
        { code: '1', name: 'Kinh' },
        { code: '2', name: 'T√†y' },
        { code: '3', name: 'Th√°i' },
        { code: '4', name: 'M∆∞·ªùng' },
        { code: '5', name: 'Hre' },
        { code: '6', name: 'Bru-V√¢n Ki·ªÅu' },
        { code: '7', name: 'Xa Phang' },
    ];

    // L·∫•y danh s√°ch t·ªânh/th√†nh ph·ªë t·ª´ API c√¥ng khai
    useEffect(() => {
        const fetchProvinces = async () => {
            try {
                const response = await fetch(
                    'https://provinces.open-api.vn/api/p/'
                );
                if (!response.ok) {
                    throw new Error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch t·ªânh/th√†nh ph·ªë');
                }
                const data: Province[] = await response.json();
                setProvinces(data);
            } catch (error) {
                toast({
                    title: 'L·ªói h·ªá th·ªëng',
                    description: 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch t·ªânh/th√†nh ph·ªë.',
                });
            }
        };
        fetchProvinces();
    }, [toast]);

    // L·∫•y danh s√°ch qu·∫≠n/huy·ªán
    useEffect(() => {
        if (selectedProvinceCode) {
            fetch(
                `https://provinces.open-api.vn/api/p/${selectedProvinceCode}?depth=3`
            )
                .then(res => res.json())
                .then(data => setDistricts(data.districts || []))
                .catch(() => setDistricts([]));
        } else {
            setDistricts([]);
        }
    }, [selectedProvinceCode]);

    // L·∫•y danh s√°ch ph∆∞·ªùng/x√£
    useEffect(() => {
        if (selectedDistrictCode && districts.length > 0) {
            const selectedDistrict = districts.find(
                d => String(d.code) === String(selectedDistrictCode)
            );
            setWards(selectedDistrict?.wards || []);
        } else {
            setWards([]);
        }
    }, [selectedDistrictCode, districts]);

    // G√°n danh s√°ch d√¢n t·ªôc tƒ©nh
    useEffect(() => {
        setEthnicities(staticEthnicities);
    }, []);

    const handleCCCDCheck = async (cccdValue: string) => {
        try {
            setPatientForm({ ...patientForm, national_id: cccdValue });

            // Ki·ªÉm tra b·∫£o hi·ªÉm y t·∫ø
            const insuranceResponse = await api.get<{ has_insurance: boolean }>(
                `/insurances/check/${cccdValue}`
            );

            // L∆∞u tr·∫°ng th√°i b·∫£o hi·ªÉm
            const hasInsurance =
                insuranceResponse?.data?.has_insurance || false;
            if (localStorage.getItem('has_insurances')) {
                localStorage.removeItem('has_insurances');
            }
            localStorage.setItem(
                'has_insurances',
                JSON.stringify(hasInsurance)
            );

            if (!hasInsurance) {
                toast({
                    title: 'üöß Kh√¥ng t√¨m th·∫•y th√¥ng tin b·∫£o hi·ªÉm!',
                    description: 'B·∫°n ƒë∆∞·ª£c chuy·ªÉn sang kh√°m d·ªãch v·ª• ',
                });
            }

            // Ti·∫øp t·ª•c ƒëƒÉng nh·∫≠p ƒë·ªÉ ki·ªÉm tra th√¥ng tin b·ªánh nh√¢n
            await loginPatient(cccdValue);
        } catch (error) {
            toast({
                title: 'L·ªói h·ªá th·ªëng',
                description:
                    'Kh√¥ng th·ªÉ x·ª≠ l√Ω th√¥ng tin CCCD. Vui l√≤ng th·ª≠ l·∫°i.',
            });
            console.error('Error in handleCCCDCheck:', error);
        }
    };

    const loginPatient = async (nationalId: string) => {
        try {
            // G·ª≠i y√™u c·∫ßu ƒëƒÉng nh·∫≠p
            const loginResponse = await api.post<{
                token: { access_token: string; refresh_token: string };
            }>('/auth/patient/login', { national_id: nationalId });

            if (!loginResponse?.data?.token?.access_token) {
                throw new Error('Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p: Token kh√¥ng h·ª£p l·ªá');
            }

            const { access_token, refresh_token } = loginResponse.data.token;
            if (localStorage.getItem('access_token')) {
                localStorage.removeItem('access_token');
            }
            if (localStorage.getItem('refresh_token')) {
                localStorage.removeItem('refresh_token');
            }
            localStorage.setItem('access_token', access_token);
            localStorage.setItem('refresh_token', refresh_token);

            // Ki·ªÉm tra th√¥ng tin b·ªánh nh√¢n
            try {
                const patientResponse = await api.get<Patient>('/patients/me');
                if (patientResponse?.data) {
                    setPatient(patientResponse.data);
                    setPatientExists(true);
                    setShowForm(false); // Kh√¥ng hi·ªÉn th·ªã form n·∫øu b·ªánh nh√¢n ƒë√£ t·ªìn t·∫°i
                } else {
                    setShowForm(true); // Hi·ªÉn th·ªã form n·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin b·ªánh nh√¢n
                }
            } catch (error) {
                // N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin b·ªánh nh√¢n, m·ªü form nh·∫≠p
                setShowForm(true);
                setPatientExists(false);
                toast({
                    title: 'üöß Kh√¥ng t√¨m th·∫•y th√¥ng tin b·ªánh nh√¢n',
                    description: 'Vui l√≤ng ƒëƒÉng k√Ω t·∫°i ƒë√¢y !',
                });
            }
        } catch (error) {
            toast({
                title: 'Kh√¥ng c√≥ th√¥ng tin b·ªánh nh√¢n !',
                description: 'Vui l√≤ng ƒëƒÉng k√Ω th√¥ng tin t·∫°i ƒë√¢y',
            });
            console.error('Error in loginPatient:', error);
            setShowForm(true); // Hi·ªÉn th·ªã form n·∫øu c√≥ l·ªói ƒëƒÉng nh·∫≠p
        }
    };

    const handleScanSuccess = async (scannedCCCD: string) => {
        setCccd(scannedCCCD);
        setShowScanner(false);
        await handleCCCDCheck(scannedCCCD);
    };

    const handleCCCDSubmit = async () => {
        if (cccd.length !== 12) {
            toast({
                title: 'CCCD kh√¥ng h·ª£p l·ªá',
                description: 'CCCD ph·∫£i c√≥ ƒë√∫ng 12 s·ªë.',
            });
            return;
        }
        await handleCCCDCheck(cccd);
    };

    const handleFormSubmit = async () => {
        const requiredFields = [
            patientForm.national_id,
            patientForm.full_name,
            patientForm.date_of_birth,
            patientForm.gender,
            patientForm.phone,
            patientForm.ward,
            patientForm.district,
            patientForm.province,
            patientForm.ethnicity,
            patientForm.occupation,
        ];

        if (requiredFields.some(field => !field)) {
            toast({
                title: 'Thi·∫øu th√¥ng tin',
                description: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ c√°c tr∆∞·ªùng b·∫Øt bu·ªôc.',
            });
            return;
        }

        try {
            await api.post('/auth/patient/register', patientForm);
            await loginPatient(patientForm.national_id);
            setPatient(patientForm);
            setPatientExists(true);
        } catch (error) {
            toast({
                title: 'L·ªói ƒëƒÉng k√Ω',
                description: 'Kh√¥ng th·ªÉ ƒëƒÉng k√Ω b·ªánh nh√¢n. Vui l√≤ng th·ª≠ l·∫°i.',
            });
            console.error('Error in handleFormSubmit:', error);
        }
    };

    const handleNext = () => {
        setCurrentStep(2);
    };

    if (patientExists && patient) {
        return (
            <div className="max-w-4xl mx-auto">
                <div className="bg-white rounded-2xl shadow-lg p-8">
                    <div className="text-center mb-8">
                        <h2 className="text-3xl font-bold text-gray-900 mb-2">
                            Th√¥ng Tin B·ªánh Nh√¢n
                        </h2>
                        <p className="text-gray-600">
                            X√°c nh·∫≠n th√¥ng tin c·ªßa b·∫°n
                        </p>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                        <div className="space-y-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    S·ªë CCCD
                                </label>
                                <p className="text-lg font-semibold text-gray-900">
                                    {patient.national_id}
                                </p>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    H·ªç v√† t√™n
                                </label>
                                <p className="text-lg font-semibold text-gray-900">
                                    {patient.full_name}
                                </p>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Ng√†y sinh
                                </label>
                                <p className="text-lg font-semibold text-gray-900">
                                    {patient.date_of_birth}
                                </p>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Gi·ªõi t√≠nh
                                </label>
                                <p className="text-lg font-semibold text-gray-900">
                                    {patient.gender}
                                </p>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Ngh·ªÅ nghi·ªáp
                                </label>
                                <p className="text-lg font-semibold text-gray-900">
                                    {patient.occupation}
                                </p>
                            </div>
                        </div>
                        <div className="space-y-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    S·ªë ƒëi·ªán tho·∫°i
                                </label>
                                <p className="text-lg font-semibold text-gray-900">
                                    {patient.phone}
                                </p>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Ph∆∞·ªùng/X√£
                                </label>
                                <p className="text-lg font-semibold text-gray-900">
                                    {patient.ward}
                                </p>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Qu·∫≠n/Huy·ªán
                                </label>
                                <p className="text-lg font-semibold text-gray-900">
                                    {patient.district}
                                </p>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    T·ªânh/Th√†nh ph·ªë
                                </label>
                                <p className="text-lg font-semibold text-gray-900">
                                    {patient.province}
                                </p>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    D√¢n t·ªôc
                                </label>
                                <p className="text-lg font-semibold text-gray-900">
                                    {patient.ethnicity}
                                </p>
                            </div>
                        </div>
                    </div>

                    <div className="text-center">
                        <button
                            onClick={handleNext}
                            className="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-4 px-12 rounded-xl transition-colors duration-200 text-lg"
                        >
                            Ti·∫øp t·ª•c
                        </button>
                    </div>
                </div>
            </div>
        );
    }

    if (showForm) {
        return (
            <div className="max-w-4xl mx-auto">
                <div className="bg-white rounded-2xl shadow-lg p-8">
                    <div className="text-center mb-8">
                        <h2 className="text-3xl font-bold text-gray-900 mb-2">
                            Nh·∫≠p Th√¥ng Tin B·ªánh Nh√¢n
                        </h2>
                        <p className="text-gray-600">
                            Vui l√≤ng cung c·∫•p th√¥ng tin chi ti·∫øt
                        </p>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                        <div className="space-y-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    S·ªë CCCD *
                                </label>
                                <input
                                    type="text"
                                    value={patientForm.national_id}
                                    readOnly
                                    className="w-full px-4 py-3 border border-gray-300 rounded-xl bg-gray-100 text-lg"
                                    placeholder="S·ªë CCCD"
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    H·ªç v√† t√™n *
                                </label>
                                <input
                                    type="text"
                                    value={patientForm.full_name}
                                    onChange={(
                                        e: React.ChangeEvent<HTMLInputElement>
                                    ) =>
                                        setPatientForm({
                                            ...patientForm,
                                            full_name: e.target.value,
                                        })
                                    }
                                    className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg"
                                    placeholder="Nh·∫≠p h·ªç v√† t√™n"
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Ng√†y sinh *
                                </label>
                                <input
                                    type="date"
                                    value={patientForm.date_of_birth}
                                    onChange={(
                                        e: React.ChangeEvent<HTMLInputElement>
                                    ) =>
                                        setPatientForm({
                                            ...patientForm,
                                            date_of_birth: e.target.value,
                                        })
                                    }
                                    className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg"
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Gi·ªõi t√≠nh *
                                </label>
                                <select
                                    value={patientForm.gender}
                                    onChange={(
                                        e: React.ChangeEvent<HTMLSelectElement>
                                    ) =>
                                        setPatientForm({
                                            ...patientForm,
                                            gender: e.target.value,
                                        })
                                    }
                                    className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg"
                                >
                                    <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
                                    <option value="Nam">Nam</option>
                                    <option value="N·ªØ">N·ªØ</option>
                                    <option value="Kh√°c">Kh√°c</option>
                                </select>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    S·ªë ƒëi·ªán tho·∫°i *
                                </label>
                                <div className="relative">
                                    <input
                                        type="text"
                                        value={patientForm.phone}
                                        readOnly
                                        onClick={() =>
                                            setShowPhoneKeyboard(true)
                                        }
                                        className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg cursor-pointer"
                                        placeholder="Nh·∫•n ƒë·ªÉ nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                                    />
                                    <Phone
                                        className="absolute right-3 top-3 text-gray-400"
                                        size={20}
                                    />
                                </div>
                            </div>
                        </div>
                        <div className="space-y-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    T·ªânh/Th√†nh ph·ªë *
                                </label>
                                <select
                                    value={patientForm.province}
                                    onChange={e => {
                                        const code =
                                            e.target.selectedOptions[0].getAttribute(
                                                'data-code'
                                            ) || '';
                                        const name = e.target.value;
                                        setSelectedProvinceCode(code);
                                        setPatientForm({
                                            ...patientForm,
                                            province: name,
                                            district: '',
                                            ward: '',
                                        });
                                    }}
                                    className="w-full px-4 py-[13px] border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg"
                                >
                                    <option value="">
                                        Ch·ªçn t·ªânh/th√†nh ph·ªë
                                    </option>
                                    {provinces.map(province => (
                                        <option
                                            key={province.code}
                                            value={province.name}
                                            data-code={province.code}
                                        >
                                            {province.name}
                                        </option>
                                    ))}
                                </select>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Qu·∫≠n/Huy·ªán *
                                </label>
                                <select
                                    value={patientForm.district}
                                    onChange={e => {
                                        const code =
                                            e.target.selectedOptions[0].getAttribute(
                                                'data-code'
                                            ) || '';
                                        const name = e.target.value;
                                        setSelectedDistrictCode(code);
                                        setPatientForm({
                                            ...patientForm,
                                            district: name,
                                            ward: '',
                                        });
                                    }}
                                    className="w-full px-4 py-[13px] border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg"
                                >
                                    <option value="">Ch·ªçn qu·∫≠n/huy·ªán</option>
                                    {districts.map(district => (
                                        <option
                                            key={district.code}
                                            value={district.name}
                                            data-code={district.code}
                                        >
                                            {district.name}
                                        </option>
                                    ))}
                                </select>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Ph∆∞·ªùng/X√£ *
                                </label>
                                <select
                                    value={patientForm.ward}
                                    onChange={(
                                        e: React.ChangeEvent<HTMLSelectElement>
                                    ) =>
                                        setPatientForm({
                                            ...patientForm,
                                            ward: e.target.value,
                                        })
                                    }
                                    className="w-full px-4 py-[13px] border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg"
                                    disabled={!patientForm.district}
                                >
                                    <option value="">Ch·ªçn ph∆∞·ªùng/x√£</option>
                                    {wards.map(ward => (
                                        <option
                                            key={ward.code}
                                            value={ward.name}
                                        >
                                            {ward.name}
                                        </option>
                                    ))}
                                </select>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    D√¢n t·ªôc *
                                </label>
                                <select
                                    value={patientForm.ethnicity}
                                    onChange={(
                                        e: React.ChangeEvent<HTMLSelectElement>
                                    ) =>
                                        setPatientForm({
                                            ...patientForm,
                                            ethnicity: e.target.value,
                                        })
                                    }
                                    className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg"
                                >
                                    <option value="">Ch·ªçn d√¢n t·ªôc</option>
                                    {ethnicities.map(ethnicity => (
                                        <option
                                            key={ethnicity.code}
                                            value={ethnicity.name}
                                        >
                                            {ethnicity.name}
                                        </option>
                                    ))}
                                </select>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Ngh·ªÅ nghi·ªáp *
                                </label>
                                {isCustomOccupation ? (
                                    <input
                                        type="text"
                                        value={patientForm.occupation}
                                        onChange={(
                                            e: React.ChangeEvent<HTMLInputElement>
                                        ) =>
                                            setPatientForm({
                                                ...patientForm,
                                                occupation: e.target.value,
                                            })
                                        }
                                        className="w-full px-4 py-[13px] border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg"
                                        placeholder="Nh·∫≠p ngh·ªÅ nghi·ªáp"
                                    />
                                ) : (
                                    <select
                                        value={patientForm.occupation}
                                        onChange={(
                                            e: React.ChangeEvent<HTMLSelectElement>
                                        ) => {
                                            if (e.target.value === 'custom') {
                                                setIsCustomOccupation(true);
                                                setPatientForm({
                                                    ...patientForm,
                                                    occupation: '',
                                                });
                                            } else {
                                                setPatientForm({
                                                    ...patientForm,
                                                    occupation: e.target.value,
                                                });
                                            }
                                        }}
                                        className="w-full px-4 py-[13px] border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg"
                                    >
                                        <option value="">
                                            Ch·ªçn ngh·ªÅ nghi·ªáp
                                        </option>
                                        {occupations.map(occupation => (
                                            <option
                                                key={occupation.code}
                                                value={occupation.name}
                                            >
                                                {occupation.name}
                                            </option>
                                        ))}
                                    </select>
                                )}
                            </div>
                        </div>
                    </div>

                    <div className="text-center">
                        <button
                            onClick={handleFormSubmit}
                            className="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-4 px-12 rounded-xl transition-colors duration-200 text-lg"
                        >
                            X√°c nh·∫≠n th√¥ng tin
                        </button>
                    </div>
                </div>

                {showPhoneKeyboard && (
                    <NumericKeyboard
                        value={patientForm.phone}
                        onChange={(value: string) =>
                            setPatientForm({ ...patientForm, phone: value })
                        }
                        onClose={() => setShowPhoneKeyboard(false)}
                        maxLength={10}
                    />
                )}
            </div>
        );
    }

    return (
        <div className="max-w-4xl mx-auto">
            <div className="bg-white rounded-2xl shadow-lg p-8">
                <div className="text-center mb-8">
                    <h2 className="text-3xl font-bold text-gray-900 mb-2">
                        Nh·∫≠p S·ªë CCCD
                    </h2>
                    <p className="text-gray-600">
                        Vui l√≤ng nh·∫≠p s·ªë cƒÉn c∆∞·ªõc c√¥ng d√¢n (12 s·ªë)
                    </p>
                </div>

                <div className="max-w-md mx-auto mb-8">
                    <div
                        className="relative cursor-pointer"
                        onClick={() => setShowKeyboard(true)}
                    >
                        <input
                            type="text"
                            value={cccd}
                            readOnly
                            className="w-full px-6 py-4 border-2 border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent text-2xl font-semibold text-center cursor-pointer"
                            placeholder="Nh·∫•n ƒë·ªÉ nh·∫≠p CCCD"
                        />
                        <CreditCard
                            className="absolute right-4 top-4 text-gray-400"
                            size={24}
                        />
                    </div>

                    <div className="mt-6">
                        <button
                            onClick={() => setShowScanner(true)}
                            className="flex items-center justify-center text-lg w-full bg-green-500 hover:bg-green-600 text-white font-semibold py-4 px-6 rounded-xl transition-colors duration-200 cursor-pointer"
                        >
                            <Scan className="mr-3" size={24} />
                            Qu√©t th·∫ª CCCD
                        </button>
                    </div>
                </div>

                <div className="text-center">
                    <button
                        onClick={handleCCCDSubmit}
                        disabled={cccd.length !== 12}
                        className="bg-blue-500 hover:bg-blue-600 disabled:bg-gray-300 text-white font-semibold py-4 px-12 rounded-xl transition-colors duration-200 text-lg cursor-pointer"
                    >
                        X√°c nh·∫≠n
                    </button>
                </div>
            </div>

            {showKeyboard && (
                <NumericKeyboard
                    value={cccd}
                    onChange={setCccd}
                    onClose={() => setShowKeyboard(false)}
                    maxLength={12}
                />
            )}

            {showScanner && (
                <CCCDScanner
                    onScanSuccess={handleScanSuccess}
                    onClose={() => setShowScanner(false)}
                />
            )}
        </div>
    );
};

export default PatientInfo;
