'use client';

import React, { useState } from 'react';
import { CreditCard, User, Phone, Calendar, Scan } from 'lucide-react';
import { useAppContext } from '../context/AppContext';
import NumericKeyboard from './NumericKeyboard';
import CCCDScanner from './CCCDScanner';
import { useRouter } from 'next/navigation';
import { useToast } from '@/app/components/ui/use-toast';
import api from '@/app/axios/api';

const PatientInfo: React.FC = () => {
    const { setCurrentStep, patient, setPatient } = useAppContext();
    const [cccd, setCccd] = useState('');
    const [showKeyboard, setShowKeyboard] = useState(false);
    const [patientForm, setPatientForm] = useState({
        national_id: '', // CCCD
        full_name: '', // H·ªç v√† t√™n
        date_of_birth: '',
        gender: '',
        phone: '',
        ward: '',
        province: '',
        ethnicity: '',
        occupation: '', // Ngh·ªÅ nghi·ªáp
    });

    const [showForm, setShowForm] = useState(false);
    const [patientExists, setPatientExists] = useState(false);
    const [showPhoneKeyboard, setShowPhoneKeyboard] = useState(false);
    const [showScanner, setShowScanner] = useState(false);
    const router = useRouter();
    const { toast } = useToast();

    const handleCCCDCheck = async (cccdValue: string) => {
        try {
            setPatientForm({ ...patientForm, national_id: cccdValue });

            // Ki·ªÉm tra th√¥ng tin b·∫£o hi·ªÉm
            const insuranceResponse = await api.get(
                `/insurances/check/${cccdValue}`
            );
            if (!insuranceResponse?.data?.has_insurance) {
                toast({
                    title: 'üöß Kh√¥ng t√¨m th·∫•y th√¥ng tin b·∫£o hi·ªÉm !',
                    description: 'Vui l√≤ng chuy·ªÉn sang kh√°m d·ªãch v·ª•.',
                });
                router.push('/');
                return;
            }

            // ƒêƒÉng nh·∫≠p b·ªánh nh√¢n
            const loginResponse = await api.post('/auth/patient/login', {
                national_id: cccdValue,
            });
            if (!loginResponse?.data?.token?.access_token) {
                throw new Error('Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p: Token kh√¥ng h·ª£p l·ªá');
            }

            ['access_token', 'refresh_token'].forEach(key => {
                if (localStorage.getItem(key)) {
                    localStorage.removeItem(key);
                }
                localStorage.setItem(key, loginResponse.data.token[key]);
            });

            // L·∫•y th√¥ng tin b·ªánh nh√¢n t·ª´ API /patients/me
            const patientResponse = await api.get('/patients/me');
            if (patientResponse?.data) {
                setPatient(patientResponse.data);
                setPatientExists(true);
            } else {
                setShowForm(true); // N·∫øu kh√¥ng t√¨m th·∫•y b·ªánh nh√¢n, hi·ªÉn th·ªã form nh·∫≠p th√¥ng tin
            }
        } catch (error) {
            toast({
                title: 'L·ªói h·ªá th·ªëng',
                description:
                    'Kh√¥ng th·ªÉ x·ª≠ l√Ω th√¥ng tin CCCD. Vui l√≤ng th·ª≠ l·∫°i.',
            });
            console.error('Error in handleCCCDCheck:', error);
        }
    };

    const handleScanSuccess = async (scannedCCCD: string) => {
        setCccd(scannedCCCD);
        setShowScanner(false);
        await handleCCCDCheck(scannedCCCD);
    };

    const handleCCCDSubmit = async () => {
        if (cccd.length !== 12) {
            toast({
                title: 'CCCD kh√¥ng h·ª£p l·ªá',
                description: 'CCCD ph·∫£i c√≥ ƒë√∫ng 12 s·ªë.',
            });
            return;
        }
        await handleCCCDCheck(cccd);
    };

    const handleFormSubmit = () => {
        const requiredFields = [
            patientForm.national_id,
            patientForm.full_name,
            patientForm.date_of_birth,
            patientForm.gender,
            patientForm.phone,
            patientForm.ward,
            patientForm.province,
            patientForm.ethnicity,
            patientForm.occupation,
        ];

        if (requiredFields.some(field => !field)) {
            toast({
                title: 'Thi·∫øu th√¥ng tin',
                description: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ c√°c tr∆∞·ªùng b·∫Øt bu·ªôc.',
            });
            return;
        }

        // L∆∞u th√¥ng tin b·ªánh nh√¢n v√†o context
        setPatient(patientForm);
        setPatientExists(true);
    };

    const handleNext = () => {
        setCurrentStep(2);
    };

    if (patientExists && patient) {
        return (
            <div className="max-w-4xl mx-auto">
                <div className="bg-white rounded-2xl shadow-lg p-8">
                    <div className="text-center mb-8">
                        <h2 className="text-3xl font-bold text-gray-900 mb-2">
                            Th√¥ng Tin B·ªánh Nh√¢n
                        </h2>
                        <p className="text-gray-600">
                            X√°c nh·∫≠n th√¥ng tin c·ªßa b·∫°n
                        </p>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                        <div className="space-y-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    S·ªë CCCD
                                </label>
                                <p className="text-lg font-semibold text-gray-900">
                                    {patient.national_id}
                                </p>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    H·ªç v√† t√™n
                                </label>
                                <p className="text-lg font-semibold text-gray-900">
                                    {patient.full_name}
                                </p>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Ng√†y sinh
                                </label>
                                <p className="text-lg font-semibold text-gray-900">
                                    {patient.date_of_birth}
                                </p>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Gi·ªõi t√≠nh
                                </label>
                                <p className="text-lg font-semibold text-gray-900">
                                    {patient.gender}
                                </p>
                            </div>
                        </div>
                        <div className="space-y-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    S·ªë ƒëi·ªán tho·∫°i
                                </label>
                                <p className="text-lg font-semibold text-gray-900">
                                    {patient.phone}
                                </p>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Ph∆∞·ªùng/X√£
                                </label>
                                <p className="text-lg font-semibold text-gray-900">
                                    {patient.ward}
                                </p>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    T·ªânh/Th√†nh ph·ªë
                                </label>
                                <p className="text-lg font-semibold text-gray-900">
                                    {patient.province}
                                </p>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    D√¢n t·ªôc
                                </label>
                                <p className="text-lg font-semibold text-gray-900">
                                    {patient.ethnicity}
                                </p>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    Ngh·ªÅ nghi·ªáp
                                </label>
                                <p className="text-lg font-semibold text-gray-900">
                                    {patient.occupation}
                                </p>
                            </div>
                        </div>
                    </div>

                    <div className="text-center">
                        <button
                            onClick={handleNext}
                            className="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-4 px-12 rounded-xl transition-colors duration-200 text-lg"
                        >
                            Ti·∫øp t·ª•c
                        </button>
                    </div>
                </div>
            </div>
        );
    }

    if (showForm) {
        return (
            <div className="max-w-4xl mx-auto">
                <div className="bg-white rounded-2xl shadow-lg p-8">
                    <div className="text-center mb-8">
                        <h2 className="text-3xl font-bold text-gray-900 mb-2">
                            Nh·∫≠p Th√¥ng Tin B·ªánh Nh√¢n
                        </h2>
                        <p className="text-gray-600">
                            Vui l√≤ng cung c·∫•p th√¥ng tin chi ti·∫øt
                        </p>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                        <div className="space-y-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    S·ªë CCCD *
                                </label>
                                <input
                                    type="text"
                                    value={patientForm.national_id}
                                    readOnly
                                    className="w-full px-4 py-3 border border-gray-300 rounded-xl bg-gray-100 text-lg"
                                    placeholder="S·ªë CCCD"
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    H·ªç v√† t√™n *
                                </label>
                                <input
                                    type="text"
                                    value={patientForm.full_name}
                                    onChange={e =>
                                        setPatientForm({
                                            ...patientForm,
                                            full_name: e.target.value,
                                        })
                                    }
                                    className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg"
                                    placeholder="Nh·∫≠p h·ªç v√† t√™n"
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Ng√†y sinh *
                                </label>
                                <input
                                    type="date"
                                    value={patientForm.date_of_birth}
                                    onChange={e =>
                                        setPatientForm({
                                            ...patientForm,
                                            date_of_birth: e.target.value,
                                        })
                                    }
                                    className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg"
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Gi·ªõi t√≠nh *
                                </label>
                                <select
                                    value={patientForm.gender}
                                    onChange={e =>
                                        setPatientForm({
                                            ...patientForm,
                                            gender: e.target.value,
                                        })
                                    }
                                    className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg"
                                >
                                    <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
                                    <option value="Nam">Nam</option>
                                    <option value="N·ªØ">N·ªØ</option>
                                </select>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    S·ªë ƒëi·ªán tho·∫°i *
                                </label>
                                <div className="relative">
                                    <input
                                        type="text"
                                        value={patientForm.phone}
                                        readOnly
                                        onClick={() =>
                                            setShowPhoneKeyboard(true)
                                        }
                                        className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg cursor-pointer"
                                        placeholder="Nh·∫•n ƒë·ªÉ nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                                    />
                                    <Phone
                                        className="absolute right-3 top-3 text-gray-400"
                                        size={20}
                                    />
                                </div>
                            </div>
                        </div>
                        <div className="space-y-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Ph∆∞·ªùng/X√£ *
                                </label>
                                <select
                                    value={patientForm.ward}
                                    onChange={e =>
                                        setPatientForm({
                                            ...patientForm,
                                            ward: e.target.value,
                                        })
                                    }
                                    className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg"
                                >
                                    <option value="">Ch·ªçn ph∆∞·ªùng/x√£</option>
                                    <option value="Ph∆∞·ªùng 1">Ph∆∞·ªùng 1</option>
                                    <option value="Ph∆∞·ªùng 2">Ph∆∞·ªùng 2</option>
                                    <option value="X√£ A">X√£ A</option>
                                </select>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    T·ªânh/Th√†nh ph·ªë *
                                </label>
                                <select
                                    value={patientForm.province}
                                    onChange={e =>
                                        setPatientForm({
                                            ...patientForm,
                                            province: e.target.value,
                                        })
                                    }
                                    className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg"
                                >
                                    <option value="">
                                        Ch·ªçn t·ªânh/th√†nh ph·ªë
                                    </option>
                                    <option value="H√† N·ªôi">H√† N·ªôi</option>
                                    <option value="TP. H·ªì Ch√≠ Minh">
                                        TP. H·ªì Ch√≠ Minh
                                    </option>
                                    <option value="ƒê√† N·∫µng">ƒê√† N·∫µng</option>
                                </select>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    D√¢n t·ªôc *
                                </label>
                                <select
                                    value={patientForm.ethnicity}
                                    onChange={e =>
                                        setPatientForm({
                                            ...patientForm,
                                            ethnicity: e.target.value,
                                        })
                                    }
                                    className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg"
                                >
                                    <option value="">Ch·ªçn d√¢n t·ªôc</option>
                                    <option value="Kinh">Kinh</option>
                                    <option value="T√†y">T√†y</option>
                                    <option value="Th√°i">Th√°i</option>
                                </select>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Ngh·ªÅ nghi·ªáp *
                                </label>
                                <select
                                    value={patientForm.occupation}
                                    onChange={e =>
                                        setPatientForm({
                                            ...patientForm,
                                            occupation: e.target.value,
                                        })
                                    }
                                    className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg"
                                >
                                    <option value="">Ch·ªçn ngh·ªÅ nghi·ªáp</option>
                                    <option value="Nh√¢n vi√™n vƒÉn ph√≤ng">
                                        Nh√¢n vi√™n vƒÉn ph√≤ng
                                    </option>
                                    <option value="C√¥ng nh√¢n">C√¥ng nh√¢n</option>
                                    <option value="H·ªçc sinh/Sinh vi√™n">
                                        H·ªçc sinh/Sinh vi√™n
                                    </option>
                                    <option value="Ngh·ªâ h∆∞u">Ngh·ªâ h∆∞u</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <div className="text-center">
                        <button
                            onClick={handleFormSubmit}
                            className="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-4 px-12 rounded-xl transition-colors duration-200 text-lg"
                        >
                            X√°c nh·∫≠n th√¥ng tin
                        </button>
                    </div>
                </div>

                {showPhoneKeyboard && (
                    <NumericKeyboard
                        value={patientForm.phone}
                        onChange={value =>
                            setPatientForm({ ...patientForm, phone: value })
                        }
                        onClose={() => setShowPhoneKeyboard(false)}
                        maxLength={10}
                    />
                )}
            </div>
        );
    }

    return (
        <div className="max-w-4xl mx-auto">
            <div className="bg-white rounded-2xl shadow-lg p-8">
                <div className="text-center mb-8">
                    <h2 className="text-3xl font-bold text-gray-900 mb-2">
                        Nh·∫≠p S·ªë CCCD
                    </h2>
                    <p className="text-gray-600">
                        Vui l√≤ng nh·∫≠p s·ªë cƒÉn c∆∞·ªõc c√¥ng d√¢n (12 s·ªë)
                    </p>
                </div>

                <div className="max-w-md mx-auto mb-8">
                    <div
                        className="relative cursor-pointer"
                        onClick={() => setShowKeyboard(true)}
                    >
                        <input
                            type="text"
                            value={cccd}
                            readOnly
                            className="w-full px-6 py-4 border-2 border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent text-2xl font-semibold text-center cursor-pointer"
                            placeholder="Nh·∫•n ƒë·ªÉ nh·∫≠p CCCD"
                        />
                        <CreditCard
                            className="absolute right-4 top-4 text-gray-400"
                            size={24}
                        />
                    </div>

                    <div className="mt-6">
                        <button
                            onClick={() => setShowScanner(true)}
                            className="flex items-center justify-center text-lg w-full bg-green-500 hover:bg-green-600 text-white font-semibold py-4 px-6 rounded-xl transition-colors duration-200 cursor-pointer"
                        >
                            <Scan className="mr-3" size={24} />
                            Qu√©t th·∫ª CCCD
                        </button>
                    </div>
                </div>

                <div className="text-center">
                    <button
                        onClick={handleCCCDSubmit}
                        disabled={cccd.length !== 12}
                        className="bg-blue-500 hover:bg-blue-600 disabled:bg-gray-300 text-white font-semibold py-4 px-12 rounded-xl transition-colors duration-200 text-lg cursor-pointer"
                    >
                        X√°c nh·∫≠n
                    </button>
                </div>
            </div>

            {showKeyboard && (
                <NumericKeyboard
                    value={cccd}
                    onChange={setCccd}
                    onClose={() => setShowKeyboard(false)}
                    maxLength={12}
                />
            )}

            {showScanner && (
                <CCCDScanner
                    onScanSuccess={handleScanSuccess}
                    onClose={() => setShowScanner(false)}
                />
            )}
        </div>
    );
};

export default PatientInfo;
